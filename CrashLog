package yourPackageName;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;
import android.os.Environment;
import android.os.Looper;
import android.os.SystemClock;
import android.support.annotation.MainThread;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresPermission;
import android.support.v4.app.ActivityCompat;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Toast;

import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.Thread.UncaughtExceptionHandler;
import java.lang.reflect.Field;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * UncaughtException处理类,当程序发生Uncaught异常的时候,有该类来接管程序,并记录发送错误报告.
 *
 * @author ChengKai
 *
 */
public class GlobalCrashHelper implements UncaughtExceptionHandler {

    public static final String TAG = GlobalCrashHelper.class.getSimpleName();
    private static final long SLEEP_BEFORE_QUIT_APP = 3000;
    private static String EXCEPTION_PROMPT_INFO = "很抱歉,程序出现异常,即将退出";

    /** 系统默认的UncaughtException处理类 **/
    private Thread.UncaughtExceptionHandler mDefaultHandler;

    /** CrashHandler实例 **/
    private static final GlobalCrashHelper INSTANCE = new GlobalCrashHelper();

    /** 程序的Context对象 **/
    private Context mContext;

    /** 用来存储设备信息和异常信息 **/
    private Map<String, String> infos = new HashMap<String, String>();

    private String CATCH_LOG_PATH;

    /** 用于格式化日期,作为日志文件名的一部分 **/
    @SuppressLint("SimpleDateFormat")
    private DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
    private QuitCallback onExceptionCollectionComplete;

    /** 保证只有一个CrashHandler实例 */
    private GlobalCrashHelper() {
    }

    /** 获取CrashHandler实例,单例模式 */
    public static GlobalCrashHelper getInstance() {
        return INSTANCE;
    }

    /**
     * 初始化
     * @param context Context, Suggest ApplicationContext
     */
    @RequiresPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
    public void init(@NonNull Context context) {
        String log_path = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + context.getPackageName().replace(".", "_");
        init(context, log_path);
    }

    /**
     * 初始化
     * @param context Context, Suggest ApplicationContext.
     * @param catch_log_path Stores the path.
     */
    @RequiresPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
    public void init(@NonNull Context context, @NonNull String catch_log_path) {
        if (TextUtils.isEmpty(catch_log_path)) { catch_log_path = CATCH_LOG_PATH; }
        init(context, catch_log_path, null);
    }

    /**
     * 初始化
     * @param context Context, Suggest ApplicationContext.
     * @param catch_log_path Stores the path.
     * @param exception_prompt_info After the exception appears prompt information
     */
    @RequiresPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
    public void init(@NonNull Context context, @NonNull String catch_log_path, @NonNull String exception_prompt_info) {
        if (TextUtils.isEmpty(exception_prompt_info)) { exception_prompt_info = EXCEPTION_PROMPT_INFO; }
        init(context, catch_log_path, exception_prompt_info, null);
    }

    /**
     * 初始化
     * @param context Context, Suggest ApplicationContext.
     * @param catch_log_path Stores the path.
     * @param exception_prompt_info After the exception appears prompt information
     * @param onExceptionCollectionComplete collection exception complete execute.
     */
    @RequiresPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
	public void init(@NonNull Context context,
                     @NonNull String catch_log_path,
                     @NonNull String exception_prompt_info,
                     @Nullable QuitCallback onExceptionCollectionComplete) {
		this.mContext = context;
        this.CATCH_LOG_PATH = catch_log_path;
        this.EXCEPTION_PROMPT_INFO = exception_prompt_info;
        this.onExceptionCollectionComplete = onExceptionCollectionComplete;
		// 获取系统默认的UncaughtException处理器
		mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();
		// 设置该CrashHandler为程序的默认处理器
		Thread.setDefaultUncaughtExceptionHandler(this);
	}

	/**
	 * 当UncaughtException发生时会转入该函数来处理
	 */
	@Override
	public void uncaughtException(Thread thread, Throwable ex) {
		if (!handleException(ex) && mDefaultHandler != null) {
			// 如果用户没有处理则让系统默认的异常处理器来处理
			mDefaultHandler.uncaughtException(thread, ex);
		} else {
            SystemClock.sleep(SLEEP_BEFORE_QUIT_APP);
			// 退出程序
			android.os.Process.killProcess(android.os.Process.myPid());
			System.exit(1);
		}
	}

	/**
	 * 自定义错误处理,收集错误信息 发送错误报告等操作均在此完成.
	 * 
	 * @param ex
	 * @return true:如果处理了该异常信息;否则返回false.
	 */
	private boolean handleException(Throwable ex) {
		if (ex == null) {
			return false;
		}
        // 收集设备参数信息
        collectDeviceInfo(mContext);
        // 保存日志文件
        saveCrashInfo2File(ex);

        new Thread() {
            @Override
            public void run() {
                Looper.prepare();
                if (onExceptionCollectionComplete == null) {
                    // 使用Toast来显示异常信息
                    Toast.makeText(mContext, EXCEPTION_PROMPT_INFO, Toast.LENGTH_LONG).show();
                } else {
                    onExceptionCollectionComplete.onExceptionCollectionComplete();
                }
                Looper.loop();
            }
        }.start();

		return true;
	}

    /**
	 * 收集设备参数信息
	 * 
	 * @param ctx
	 */
    private void collectDeviceInfo(Context ctx) {
		try {
			PackageManager pm = ctx.getPackageManager();
			PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(),
					PackageManager.GET_ACTIVITIES);
			if (pi != null) {
				String versionName = pi.versionName == null ? "null" : pi.versionName;
				String versionCode = pi.versionCode + "";
				infos.put("versionName", versionName);
				infos.put("versionCode", versionCode);
			}
		} catch (NameNotFoundException e) {
			LOGE("an error occured when collect package info");
		}
		Field[] fields = Build.class.getDeclaredFields();
		for (Field field : fields) {
			try {
				field.setAccessible(true);
				infos.put(field.getName(), field.get(null).toString());
				infos.put("android-platform-version", "" + Build.VERSION.SDK_INT);
				LOGE(field.getName() + " : " + field.get(null));
			} catch (Exception e) {
                LOGE("an error occured when collect crash info");
			}
		}
	}

	/**
	 * 保存错误信息到文件中
	 * 
	 * @param ex
	 * @return 返回文件名称,便于将文件传送到服务器
	 */
	private String saveCrashInfo2File(Throwable ex) {

		StringBuffer sb = new StringBuffer();
		for (Map.Entry<String, String> entry : infos.entrySet()) {
			String key = entry.getKey();
			String value = entry.getValue();
			sb.append(key + "=" + value + "\n");
		}

		Writer writer = new StringWriter();
		PrintWriter printWriter = new PrintWriter(writer);
		ex.printStackTrace(printWriter);
		Throwable cause = ex.getCause();
		while (cause != null) {
			cause.printStackTrace(printWriter);
			cause = cause.getCause();
		}
		printWriter.close();
		String result = writer.toString();
		sb.append(result);
		try {
			String time = formatter.format(new Date());
			String fileName = "crash-" + time + ".log";
			if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
				File dir = new File(CATCH_LOG_PATH);
				if (!dir.exists()) {
					dir.mkdirs();
				}
				FileOutputStream fos = new FileOutputStream(CATCH_LOG_PATH + File.separator + fileName);
				fos.write(sb.toString().getBytes());
				fos.close();
			}
			return fileName;
		} catch (Exception e) {
            LOGE("an error occured while writing file...");
		}
		return null;
	}

	private void LOGE(String msg){ if (BuildConfig.DEBUG) { Log.e(TAG, msg); } }

    interface QuitCallback{
        @MainThread
        void onExceptionCollectionComplete();
    }
}
